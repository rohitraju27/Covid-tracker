{"version":3,"sources":["components/Cards/Cards.js","api/index.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","App.js","serviceWorker.js","index.js","images/image.png"],"names":["Cards","data","confirmed","recovered","deaths","lastUpdate","className","Grid","container","spacing","justify","item","component","Card","xs","md","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","Math","round","url","fetchData","country","a","changeAbleURL","axios","get","modifiedData","console","log","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","alt","src","corona","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.89ed4a6e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card, CardContent, Grid, Typography } from '@material-ui/core';\r\nimport './Cards.css';\r\nimport CountUp from 'react-countup';\r\n\r\nconst Cards = ({ data : {confirmed, recovered, deaths, lastUpdate} }) => {\r\n\r\n\tif(!confirmed){\r\n\t\treturn \"Loading...\"\r\n\t}\r\n\r\n\treturn(\r\n\t\t<div className=\"container\">\r\n\t\t\t<Grid container spacing={3} justify=\"center\">\r\n\t\t\t\t<Grid item component={Card} xs={12} md={3} className=\"card infected\">\r\n\t\t\t\t\t<CardContent>\r\n\t\t\t\t\t\t<Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n\t\t\t\t\t\t<Typography variant=\"h5\">\r\n\t\t\t\t\t\t\t<CountUp \r\n\t\t\t\t\t\t\t\tstart={0}\r\n\t\t\t\t\t\t\t\tend={confirmed.value}\r\n\t\t\t\t\t\t\t\tduration={2.5}\r\n\t\t\t\t\t\t\t\tseparator=','\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n\t\t\t\t\t\t<Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\r\n\t\t\t\t\t</CardContent>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Grid item component={Card} xs={12} md={3} className=\"card recovered\">\r\n\t\t\t\t\t<CardContent>\r\n\t\t\t\t\t\t<Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n\t\t\t\t\t\t<Typography variant=\"h5\">\r\n\t\t\t\t\t\t\t<CountUp \r\n\t\t\t\t\t\t\t\tstart={0}\r\n\t\t\t\t\t\t\t\tend={recovered.value}\r\n\t\t\t\t\t\t\t\tduration={2.5}\r\n\t\t\t\t\t\t\t\tseparator=','\r\n\t\t\t\t\t\t\t/>{` (${Math.round(recovered.value/confirmed.value*100)}%)`}\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n\t\t\t\t\t\t<Typography variant=\"body2\">Number of recoveries from COVID-19</Typography>\r\n\t\t\t\t\t</CardContent>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Grid item component={Card} xs={12} md={3} className=\"card deaths\">\r\n\t\t\t\t\t<CardContent>\r\n\t\t\t\t\t\t<Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n\t\t\t\t\t\t<Typography variant=\"h5\">\r\n\t\t\t\t\t\t\t<CountUp \r\n\t\t\t\t\t\t\t\tstart={0}\r\n\t\t\t\t\t\t\t\tend={deaths.value}\r\n\t\t\t\t\t\t\t\tduration={2.5}\r\n\t\t\t\t\t\t\t\tseparator=','\r\n\t\t\t\t\t\t\t/>{` (${Math.round(deaths.value/confirmed.value*100)}%)`}\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n\t\t\t\t\t\t<Typography variant=\"body2\">Number of deaths from COVID-19</Typography>\r\n\t\t\t\t\t</CardContent>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api'\r\n\r\nexport const fetchData = async (country) => {\r\n\tlet changeAbleURL = url;\r\n\tif(country){\r\n\t\tchangeAbleURL = `${url}/countries/${country}`\r\n\t}\r\n\r\n\ttry{\r\n\t\tconst { data } = await axios.get(changeAbleURL);\r\n\r\n\t\tconst modifiedData = {\r\n\t\t\tconfirmed: data.confirmed,\r\n\t\t\trecovered: data.recovered,\r\n\t\t\tdeaths: data.deaths,\r\n\t\t\tlastUpdate: data.lastUpdate\r\n\t\t}\r\n\r\n\t\treturn modifiedData;\r\n\t} catch (err) {\r\n\t\tconsole.log(err)\r\n\t}\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n\ttry{\r\n\t\tconst { data } = await axios.get(`${url}/daily`)\r\n\r\n\t\tconst modifiedData = data.map((dailyData) => ({\r\n\t\t\tconfirmed: dailyData.confirmed.total,\r\n\t\t\tdeaths: dailyData.deaths.total,\r\n\t\t\tdate: dailyData.reportDate\r\n\t\t}))\r\n\r\n\t\treturn modifiedData\r\n\t} catch(error) {\r\n\t\tconsole.log(error)\r\n\t}\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n\ttry{\r\n\t\tconst { data: { countries } } = await axios.get(`${url}/countries`)\r\n\t\treturn countries.map((country) => country.name)\r\n\t} catch(error){\r\n\t\tconsole.log(error)\r\n\t}\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport './Chart.css';\r\n\r\nconst Chart = ({ data: {confirmed, recovered, deaths}, country }) => {\r\n\tconst [dailyData, setDailyData] = useState([]); // alternative to `this.setState` which is used in class based components.\r\n\r\n\tuseEffect(() => {\r\n\t\tconst fetchAPI = async () => {\r\n\t\t\tsetDailyData(await fetchDailyData()); // We set data we get from `fetchDailyData()` to `dailyData`\r\n\t\t}\r\n\r\n\t\t\r\n\r\n\t\tfetchAPI();\r\n\t}, [])\r\n\r\n\tconst lineChart = (\r\n\t\tdailyData.length ?\r\n\t\t(<Line\r\n\t\t\tdata={{\r\n\t\t\t\tlabels:dailyData.map(({ date }) => date),\r\n\t\t\t\tdatasets: [{\r\n\t\t\t\t\tdata: dailyData.map(({ confirmed }) => confirmed),\r\n\t\t\t\t\tlabel: 'Infected',\r\n\t\t\t\t\tborderColor: '#3333ff',\r\n\t\t\t\t\tfill: true\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tdata: dailyData.map(({ deaths }) => deaths),\r\n\t\t\t\t\tlabel: 'Deaths',\r\n\t\t\t\t\tborderColor: 'red',\r\n\t\t\t\t\tbackgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n\t\t\t\t\tfill: true\r\n\t\t\t\t}]\r\n\t\t\t}}\r\n\t\t/>) : null\r\n\t);\r\n\r\n\tconst barChart = (\r\n\t\tconfirmed ?\r\n\t\t(\r\n\t\t\t<Bar \r\n\t\t\t\tdata={{\r\n\t\t\t\t\tlabels: ['Infected', 'Recovered', 'Deaths'],\r\n\t\t\t\t\tdatasets: [{\r\n\t\t\t\t\t\tlabel: 'People',\r\n\t\t\t\t\t\tbackgroundColor: [\r\n\t\t\t\t\t\t\t'rgba(0, 0, 255, 0.5)',\r\n\t\t\t\t\t\t\t'rgba(0, 255, 0, 0.5)',\r\n\t\t\t\t\t\t\t'rgba(255, 0, 0, 0.5)'\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t\tdata: [confirmed.value, recovered.value, deaths.value]\r\n\t\t\t\t\t}]\r\n\t\t\t\t}}\r\n\t\t\t\toptions={{\r\n\t\t\t\t\tlegend: {display: false},\r\n\t\t\t\t\ttitle: {display: true, text: `Current country in ${country}`}\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t) : null\r\n\t);\r\n\r\n\treturn(\r\n\t\t<div className=\"container\">\r\n\t\t\t{country ? barChart : lineChart}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Chart;","import React,{ useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport { fetchCountries } from '../../api';\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n\tconst [fetchedCountries, setFetchedCountries] = useState([])\r\n\r\n\tuseEffect(() => {\r\n\t\tconst fetchAPI = async () => {\r\n\t\t\tsetFetchedCountries(await fetchCountries())\r\n\t\t} \r\n\r\n\t\tfetchAPI()\r\n\t}, [setFetchedCountries])\r\n\r\n\treturn(\r\n\t\t<FormControl className=\"formControl\">\r\n\t\t\t<NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n\t\t\t\t<option value=\"\">Global</option>\r\n\t\t\t\t{fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n\t\t\t</NativeSelect>\r\n\t\t</FormControl>\r\n\t)\r\n}\r\n\r\nexport default CountryPicker;","import React,{Component} from 'react';\nimport './App.css';\n\nimport {  Cards, Chart, CountryPicker } from './components';\nimport { fetchData } from './api';\nimport corona from './images/image.png';\n\nclass App extends Component{\n  state = {\n  \tdata: {},\n  \tcountry: ''\n  }\n  \n  async componentDidMount() {\n  \tconst fetchedData = await fetchData()\n  \tthis.setState({data: fetchedData})\n \t  console.log(this.state.data)\n  }\n\n  handleCountryChange = async (country) => {\n  \tconst fetchedData = await fetchData(country)\n  \tthis.setState({data: fetchedData, country: country})\n  }\n\n  render(){\n  \tconst { data, country } = this.state;\n\n    return(\n      <div className=\"container\">\n      \t<img alt='COVID-19' src={corona} className=\"image\"/>\n        <Cards data={data}/>\n        <CountryPicker handleCountryChange={this.handleCountryChange}/>\n        <Chart data={data} country={country}/>\n      </div>\n    )\n  }\t\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}